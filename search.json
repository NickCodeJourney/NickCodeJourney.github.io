[{"title":"PostgreSQL查询QPS监控指南","url":"/2024/12/27/postgresql查询qps/","content":"\n## 一、安装pg_stat_statements扩展\n\n### 1.1 检查扩展是否已安装\n\n```sql\nSELECT * FROM pg_available_extensions WHERE name = 'pg_stat_statements';\n```\n\n### 1.2 安装方式\n\n#### Linux环境安装\n\n1. 安装插件\n\n```bash\n# Ubuntu/Debian\nsudo apt-get install postgresql-contrib\n\n# CentOS/RHEL\nsudo yum install postgresql-contrib\n\n```\n\n2. 修改配置文件\n\n   打开 postgresql.conf 文件，找到或添加以下行：\n\n   **shared_preload_libraries = 'pg_stat_statements'**\n\n\n3. 保存配置文件后，重启 PostgreSQL：\n\n   ```bash\n   sudo systemctl restart postgresql\n   ```\n\n#### Docker环境安装\n\n1. 修改配置\n\n```bash\ndocker exec -it <container_name> /bin/bash\necho \"shared_preload_libraries = 'pg_stat_statements'\" >> /var/lib/postgresql/data/postgresql.conf\n```\n\n2. 重启容器\n\n``` bash\ndocker restart <container_name>\n```\n\n### 1.3 启用扩展\n\n```sql\nCREATE EXTENSION pg_stat_statements;\n```\n\n## 二、常用QPS监控查询\n\n### 2.1 实时QPS查询\n\n```sql\nwith\n t1 as (select sum(calls) n from pg_stat_statements),\n t2 as (select sum(calls) n from pg_stat_statements , pg_sleep(1))\nselect\n t2.n-t1.n the_num_of_queries_per_second\nfrom\n t1,t2;\n```\n\n### 2.2 QPS 从服务开启到现在\n\n```sql\nSELECT sum(calls) / EXTRACT(EPOCH FROM NOW() - pg_postmaster_start_time())\nfrom pg_stat_statements;\n```\n\n### 2.4 查询执行次数TOP 10\n\n```sql\nSELECT query, \n       calls,\n       total_exec_time,\n       rows,\n       (total_exec_time/calls) as avg_time\nFROM pg_stat_statements \nORDER BY calls DESC \nLIMIT 10;\n```\n\n### 2.5 查询耗时TOP 10\n\n```sql\nSELECT query,\n       calls,\n       total_exec_time,\n       (total_exec_time/calls) as avg_time,\n       rows\nFROM pg_stat_statements \nORDER BY total_exec_time DESC \nLIMIT 10;\n```\n\n### 2.6 查询返回行数TOP 10\n\n```sql\nSELECT query,\n       calls,\n       rows,\n       (rows/calls) as avg_rows\nFROM pg_stat_statements \nORDER BY rows DESC \nLIMIT 10;\n```\n\n### 2.7 缓存命中率低的查询\n\n```sql\nSELECT query,\n       shared_blks_hit,\n       shared_blks_read,\n       (shared_blks_hit::float / NULLIF(shared_blks_hit + shared_blks_read, 0)) AS hit_rate\nFROM pg_stat_statements\nWHERE (shared_blks_hit + shared_blks_read) > 0\nORDER BY hit_rate ASC\nLIMIT 10;\n```\n\n### 2.8 IO消耗TOP 10\n\n```sql\nSELECT query,\n       calls,\n       shared_blks_read,\n       shared_blks_written,\n       temp_blks_written\nFROM pg_stat_statements\nORDER BY (shared_blks_read + shared_blks_written + temp_blks_written) DESC\nLIMIT 10;\n```\n\n## 三、注意事项\n\n1. **性能影响**\n   \n   - 启用pg_stat_statements会带来轻微性能开销\n   - 建议在非高峰期进行监控分析\n\n2. **统计重置**\n   \n   ```sql\n   SELECT pg_stat_statements_reset();\n   ```\n\n3. **监控建议**\n   \n   - 定期检查高频查询的性能\n   - 关注缓存命中率低的SQL\n   - 分析临时文件使用情况\n\n4. **优化方向**\n   \n   - 针对慢查询优化索引\n   - 调整数据库配置参数\n   - 优化SQL语句结构\n\n## 四、参考文档\n\n- [PostgreSQL官方文档](https://www.postgresql.org/docs/current/pgstatstatements.html)- [PostgreSQL性能优化指南](https://www.postgresql.org/docs/current/performance-tips.html)\n","tags":["PostgreSQL","QPS","性能监控"],"categories":["数据库"]},{"title":"碳水循环","url":"/2024/12/19/碳水循环/","content":"\n# 碳水循环简介\n\n碳水循环（Carb Cycling）是一种饮食策略，主要用于控制体脂、提高运动表现和改善身体的代谢反应。它通过在不同的日子里调整碳水化合物的摄入量，以优化身体对能量的使用和消耗。这种方法特别在健身、减脂和增肌的过程中被广泛应用。\n\n# 碳水循环的基本原理\n\n碳水循环的核心理念是：根据训练的强度和身体的需求来调整碳水化合物的摄入量。在高强度训练日摄入更多碳水化合物，而在休息日或低强度训练日减少碳水化合物的摄入量，从而实现最佳的脂肪燃烧和肌肉恢复效果。\n\n# 碳水循环的常见模式\n\n碳水循环有几种常见的方式，通常根据每周的训练安排来进行调整：\n\n## 1. 高碳水日\n- 通常安排在高强度训练日，如大重量训练、HIIT（高强度间歇训练）或长时间的有氧运动\n- 目的是提供足够的能量和恢复能力，避免在训练期间因碳水不足而导致肌肉分解\n- 摄入的碳水量通常占总热量的50%-70%\n\n## 2. 低碳水日\n- 安排在休息日或低强度训练日，目标是减少总热量摄入，促进脂肪燃烧\n- 摄入的碳水量较少，通常占总热量的10%-20%\n\n## 3. 非常低碳水日\n- 一些极限碳水循环计划会安排极低碳水化合物摄入日，通常是断食或极低的碳水量，用于最大化脂肪燃烧\n- 碳水摄入量可能会降到每天50克以下，依赖于脂肪作为主要能量来源\n\n# 碳水循环的优势\n\n1. 脂肪燃烧：在低碳水日，身体通过消耗储存的脂肪来提供能量，有助于减少体脂\n2. 保持肌肉质量：高碳水日提供充足的能量，帮助恢复和维持肌肉的糖原储备，避免肌肉分解\n3. 避免代谢适应：长期限制碳水化合物可能会导致代谢变慢，而碳水循环可以防止这种代谢适应，保持身体的代谢率\n4. 提高运动表现：在高碳水日，能量充沛，有助于提升训练强度和运动表现\n\n# 碳水循环的实施\n\n为了有效实施碳水循环，可以遵循以下几点：\n\n- 根据训练安排调整碳水摄入：在高强度训练日增加碳水，低强度或休息日减少碳水\n- 优先选择优质碳水：高纤维、低GI（升糖指数）食物，如全谷物、蔬菜、水果等，能提供稳定的能量释放\n- 调整总热量摄入：碳水循环不仅仅是碳水的调整，还需要控制总热量摄入，以确保达到减脂或增肌的目标\n\n# 碳水循环的适用人群\n\n碳水循环适合那些有明确健身目标的人群，尤其是：\n\n- 减脂：通过控制低碳水日来促进脂肪燃烧，同时在高碳水日保持肌肉的糖原储备\n- 增肌：通过高碳水日来提供充足的能量支持训练，并减少肌肉流失\n- 竞技运动员：提高运动表现的同时管理体重和体脂水平\n\n# 注意事项\n\n1. 个体差异：每个人的代谢和运动需求不同，碳水循环的计划应根据个人情况调整\n2. 平衡饮食：除了碳水化合物外，摄入足够的蛋白质和健康脂肪也非常重要，确保整体饮食的营养平衡\n3. 长期效果：虽然碳水循环可以在短期内帮助提升运动表现和控制体脂，但长期效果还需根据个人的健身目标进行评估\n\n# 示例计划\n\n假设你一周训练五天，休息两天，你可以设置如下的碳水循环模式：\n\n- 星期一（高碳水日）：训练强度高，摄入60-70%的碳水，蛋白质和脂肪适中\n- 星期二（低碳水日）：进行低强度运动或休息日，摄入30-40%的碳水\n- 星期三（高碳水日）：和星期一类似，增加碳水摄入，保持训练强度\n- 星期四（低碳水日）：减少碳水，增加脂肪的摄入\n- 星期五（高碳水日）：高强度训练，增加碳水摄入，恢复肌肉糖原\n- 星期六（低碳水日）：低强度活动或休息，减少碳水，促进脂肪燃烧\n- 星期日（休息日）：碳水摄入维持在较低水平，重点控制体脂","tags":["生活","健身"],"categories":["生活"]},{"title":"nginx解决跨域问题","url":"/2024/12/17/nginx解决跨域问题/","content":"\n## 1、什么是跨域\n\n跨域是指一个域名下的资源去访问另一个域名下的资源。\n\n\n## 2、什么是同源策略\n\n同源策略是浏览器的一种安全机制，它要求发送请求的URL与服务器返回的URL必须具有相同的协议、主机和端口。\n\n## 3、如何解决跨域问题\n\n通过 Nginx 反向代理可以解决跨域问题，通常涉及设置 CORS 相关的响应头。以下是一个典型的 Nginx 配置示例：\n\n```nginx\nlocation /myProject/api/ {\n\n    # 支持跨域的预检请求（OPTIONS 请求）\n    if ($request_method = 'OPTIONS') {\n        return 204;  # 直接返回 204 No Content 作为响应\n    }\n\n    # 允许的跨域 Origin 设置为请求头中的 Origin\n    add_header 'Access-Control-Allow-Origin' \"$http_origin\" always;\n    \n    # 设置跨域请求头\n    add_header 'Access-Control-Allow-Credentials' 'false' always;\n    \n    # 支持的请求方法\n    add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;\n\n    # 支持的请求头\n    add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;\n\n    # 继续代理请求\n    proxy_pass http://localhost:9001;\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    \n    # 如果没有 Origin 头部，视为同源请求，允许通过\n    if ($http_origin = \"\") {\n        return;\n    }\n\n    # 如果请求头中有 Origin，且不在白名单内，则返回 403\n    if ($http_origin !~* \"(http://www.test.com|http://10.14.32.138)\") {\n        return 403;\n    }\n}\n```\n\n### 解释：\n\n- `Access-Control-Allow-Origin`: 允许指定的域名进行跨域访问。通常通过 `$http_origin` 来动态获取请求头中的 `Origin`，或者直接指定具体的域名（如`http://www.test.com`）。\n- `Access-Control-Allow-Credentials`: 设置为 `false` 时，不允许发送 cookies 等凭证信息。\n- `Access-Control-Allow-Methods`: 指定允许的 HTTP 方法，如 `GET`, `POST`, `OPTIONS`。\n- `Access-Control-Allow-Headers`: 指定允许的请求头，通常包括 `Authorization`, `Content-Type` 等常见头信息。\n\n## 4、跨域常见场景\n\n### 4.1 不同域名\n\n- example.com 访问 api.example.com\n- a.com 访问 b.com\n\n### 4.2 不同端口\n\n- localhost:8080 访问 localhost:3000\n\n### 4.3 不同协议\n\n- https://example.com 访问 http://example.com\n\n    ## 5、其他跨域解决方案\n\n### 5.1 CORS（跨域资源共享）\n\nCORS（Cross-Origin Resource Sharing）是一种允许浏览器向跨源服务器发出请求的机制。除了在 Nginx 中配置跨域，还可以在后端应用中设置 CORS 响应头，以控制跨域请求。\n\n例如，在一个 Node.js 应用中，可以使用如下代码：\n\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.use((req, res, next) => {\n  res.header(\"Access-Control-Allow-Origin\", \"*\"); // 允许所有域名访问\n  res.header(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE, OPTIONS\");\n  res.header(\"Access-Control-Allow-Headers\", \"Origin, Content-Type, Accept, Authorization\");\n  next();\n});\n\napp.get('/api/data', (req, res) => {\n  res.json({ message: \"Hello, world!\" });\n});\n\napp.listen(3000, () => console.log(\"Server is running on port 3000\"));\n```\n\n在这个例子中，CORS 头部通过 `res.header()` 设置，允许所有域名（`*`）进行跨域访问，支持 `GET`, `POST`, `PUT` 等 HTTP 方法，并指定允许的请求头。\n\n### 5.2 JSONP（JSON with Padding）\n\nJSONP 是一种通过 `<script>` 标签来绕过同源策略进行跨域请求的方法。它的原理是利用 `<script>` 标签可以跨域加载 JavaScript 资源的特点，通过回调函数的方式返回数据。JSONP 只支持 `GET` 请求。\n\n```html\n<script type=\"text/javascript\">\n  function handleResponse(data) {\n    console.log(data);\n  }\n\n  var script = document.createElement('script');\n  script.src = 'http://example.com/api?callback=handleResponse';\n  document.body.appendChild(script);\n</script>\n```\n\n### 5.3 WebSocket\n\nWebSocket 允许在浏览器与服务器之间建立持久化的双向连接，这使得 WebSocket 成为一种天然的跨域解决方案。通过 WebSocket 协议，浏览器与不同域的服务器之间可以实时通信，且不受同源策略的限制。\n\n### 5.4 后端代理\n\n通过配置服务器端反向代理，将跨域请求转发到目标服务器。Nginx 和其他反向代理服务器可以帮助解决跨域问题。例如：\n\n```nginx\nlocation /api/ {\n    proxy_pass http://api.example.com;\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n}\n```\n\n在这个例子中，Nginx 会将 `/api/` 开头的请求转发到 `http://api.example.com`，避免了跨域问题。\n","tags":["nginx","反向代理","跨域"],"categories":["nginx"]},{"title":"Docker镜像架构问题","url":"/2024/12/17/Docker架构问题/","content":"\n## Docker 架构基础\n\n### 1. x86架构的Docker镜像可以运行在arm架构的机器上吗？\n\n- 默认情况下，x86架构的Docker镜像不能直接运行在arm架构的机器上\n- 但可以通过以下方式实现跨架构运行：\n  1. 使用 QEMU 模拟器\n  2. 使用支持多架构的镜像（multi-arch images）\n  3. 使用 buildx 构建多架构镜像\n\n### 2. Docker 镜像架构类型\n\n常见的 Docker 镜像架构包括：\n\n- linux/amd64 (x86_64)\n- linux/arm64 (aarch64)\n- linux/arm/v7\n- linux/arm/v6\n- linux/386\n- linux/ppc64le\n- linux/s390x\n\n### 3. 多架构镜像（Multi-arch images）\n\n多架构镜像允许同一个镜像标签支持多个平台和架构：\n\n- Docker 会自动选择匹配当前系统架构的版本\n- 无需手动指定架构参数\n- 通过 manifest 列表实现\n\n### 4. Docker镜像架构查看方法\n\n查看镜像架构的几种方式：\n\n```bash\n# 方法1：使用 docker inspect\ndocker inspect image_name | grep \"Architecture\"\n\n# 方法2：查看镜像清单\ndocker manifest inspect image_name\n\n# 方法3：使用 docker info\ndocker info | grep \"Architecture\"\n```\n\n### 5. 构建特定架构的镜像\n\n使用 `--platform` 参数指定目标架构：\n\n```bash\n# 构建 ARM64 架构镜像\ndocker build --platform=linux/arm64 -t myimage:arm64 .\n\n# 构建 AMD64 架构镜像\ndocker build --platform=linux/amd64 -t myimage:amd64 .\n```\n\n### 6. 拉取特定架构的镜像\n\n```bash\n# 拉取 ARM64 架构镜像\ndocker pull --platform=linux/arm64 nginx:latest\n\n# 拉取 AMD64 架构镜像\ndocker pull --platform=linux/amd64 nginx:latest\n\n# 设置默认架构\nexport DOCKER_DEFAULT_PLATFORM=linux/amd64\n```\n\n### 7. ARM Mac 运行 x86 架构镜像\n\n在搭载 Apple Silicon 的 Mac 上运行 x86 架构的 Docker 镜像：\n\n1. 使用 Colima（推荐）：\n```bash\n# 安装 Colima\nbrew install colima\n\n# 启动支持 x86_64 的虚拟机\ncolima start --arch x86_64 --memory 4 --disk 100\n\n# 验证架构\ndocker info | grep \"Architecture\"\n```\n\n2. 使用 Docker Desktop：\n   - 在设置中启用 \"Use Rosetta for x86/amd64 emulation on Apple Silicon\"\n\n### 8. Colima 详细介绍\n\nColima 是一个轻量级的容器运行时环境：\n\n- 特点：\n  - 开源免费\n  - 资源占用低\n  - 支持 x86_64 模拟\n  - 支持 Kubernetes\n  - 命令行友好\n\n- 基本操作：\n```bash\n# 启动 Colima\ncolima start\n\n# 停止 Colima\ncolima stop\n\n# 删除 Colima 实例\ncolima delete\n\n# 查看状态\ncolima status\n```\n\n### 9. 最佳实践建议\n\n1. 优先使用多架构镜像\n2. 在构建时就考虑多架构支持\n3. 使用 BuildKit 和 buildx 进行多架构构建\n4. 合理使用 QEMU 模拟器\n5. 在生产环境中尽量使用原生架构\n\n### 10. 常见问题排查\n\n1. 架构不匹配错误：\n```\nstandard_init_linux.go:228: exec user process caused: exec format error\n```\n解决方案：\n- 确认镜像架构\n- 使用正确架构的镜像\n- 启用架构模拟\n\n2. 性能问题：\n- 模拟运行会带来性能损耗\n- 建议使用原生架构镜像\n- 必要时增加资源配额\n\n## 参考资料\n\n- [Docker 官方文档](https://docs.docker.com/build/building/multi-platform/)\n- [Colima GitHub](https://github.com/abiosoft/colima)\n- [BuildKit 文档](https://docs.docker.com/build/buildkit/)\n","tags":["docker","架构","x86","arm","DevOps","colima"],"categories":["DevOps"]},{"title":"JVM大厂面试真题","url":"/2024/12/17/JVM大厂面试真题/","content":"\n对于JVM面试，面试官可以循序渐进从理论、实践各种角度深入，也未必是要求面试者什么都懂。但如果你懂得原理，一定会成为面试中的加分项。\n\n\n# 1、字节码篇\n\n- 什么是Java虚拟机（墨迹天气）\n- JVM的组成（凡预科技、杭州比智公司）\n- JVM的组成（字节跳动）\n- int a = 1;JVM如何取得a的值（圆通）\n\n \n\n- 什么是Java虚拟机(JVM)，为什么要使用？（JVM = Japanese Vedio's Man ）（阿里）\n\n```\n虚拟机：指以软件的方式模拟具有完整硬件系统功能、运行在一个完全隔离环境中的完整计算机系统 ，是物理机的软件实现。\n常用的虚拟机有VMWare，Visual Box，Java Virtual Machine（Java虚拟机，简称JVM）\n```\n\n \n\n- 说说Java虚拟机的生命周期及体系结构。（阿里）\n\n```\n虚拟机的启动\n\nJava虚拟机的启动是通过引导类加载器(bootstrap class loader)创建一个初始类(initial class)来完成的，这个类是由虚拟机的具体实现指定的。\n```\n\n \n\n```\n虚拟机的退出,有如下的几种情况：\n\n① 某线程调用Runtime类或System类的exit方法，或 Runtime类的halt方法，并且Java安全管理器也允许这次exit或halt操作。\n\n② 程序正常执行结束\n\n③ 程序在执行过程中遇到了异常或错误而异常终止\n\n④ 由于操作系统出现错误而导致Java虚拟机进程终止\n```\n\n \n\n- 类文件结构有几个部分？（百度）\n- 知道字节码吗？字节码都有哪些？Integer x = 5;int y = 5;比较 x == y 都经过哪些步骤？（百度）\n- Java中的参数传递时传值呢？还是传引用？ (阿里)\n- Java中有没有指针的概念？ (阿里)\n- 为什么不把基本类型放堆中呢？ (阿里)\n- Java虚拟机中，数据类型可以分为哪几类？ (阿里)\n\n# 2、类的加载篇\n\n- 双亲委派好处有哪些？（亚信）\n- JVM底层怎么加载class文件的？（蚂蚁金服）\n- 基本数据类型在JVM中的存储位置？（龙湖地产）\n- Java 类加载过程?（苏宁）\n- 类加载器双亲委派模型机制？（苏宁）\n- 什么是类加载器，类加载器有哪些?（苏宁）\n- 描述一下 JVM 加载 Class 文件的原理机制?（国美）\n- 什么是tomcat类加载机制？（猎聘）\n- 简单说说你了解的类加载器（拼多多）\n- 可以打破双亲委派么，怎么打破。（拼多多）\n- 深入分析ClassLoader（蚂蚁金服）\n- 双亲委派机制 （蚂蚁金服）\n- 描述一下 JVM 加载 Class 文件的原理机制? （蚂蚁金服）\n- 类加载器的双亲委派模型是什么？ （蚂蚁金服）\n- 一面：类加载过程 （蚂蚁金服）\n- 一面：双亲委派机制及使用原因 （蚂蚁金服）\n\n \n\n \n\n- 类加载的时机 （百度）\n- Java 类加载过程? （百度）\n- 类加载器都有哪些？（百度） \n- 简述 Java 类加载机制?（百度）\n- 手写一个类加载器Demo （百度）\n- Class的forName(\"Java.lang.String\")和Class的getClassLoader()的loadClass(\"Java.lang.String\")有什么区别？ （百度）\n\n \n\n \n\n- JVM中类加载机制，类加载过程，什么是双亲委派模型？ （腾讯）\n- 类加载器有哪些？ （腾讯）\n- 双亲委派模型介绍一下 （小米）\n- JVM类加载机制 （滴滴）\n- 一面：讲一下双亲委派模型，以及其优点 （滴滴）\n- 什么是类加载器，类加载器有哪些？（字节跳动）\n- Java类加载过程 （美团）\n- 描述一下JVM加载class文件的原理机制 （美团）\n- 什么是类的加载？ （京东）\n- 哪些情况会触发类的加载？ （京东）\n- 讲一下JVM加载一个类的过程 （京东）\n- JVM的类加载机制是什么？ （京东）\n- 类加载器的双亲委派模型是什么？ （京东）\n- 双亲委派机制可以打破吗？为什么 （京东）\n\n \n\n# 3、内存篇\n\n## 3.1 开头内容\n\n- JVM的内存结构，及各个结构的内容。（vivo）\n- 详细介绍一下内存结构（墨迹天气）\n- JVM有那些组成，堆，栈各放了什么东西？（搜狐、万达集团）\n- JVM的内存模型，线程独有的放在哪里？哪些是线程共享的？哪些是线程独占的？（万达集团）\n- JVM内存模型有哪些？（龙湖地产）\n- Java虚拟机中内存划分为那些区域（高德地图）\n- JVM内存模型（中国计算机研究院、亚信）\n- 讲一下为什么JVM要分为堆、方法区等？原理是什么？（小米、搜狐）\n- JVM的内存模型，线程独有的放在哪里？哪些是线程共享的？哪些是线程独占的？（菜鸟）\n- 简单说一下JVM内存结构（浪潮）\n\n- JVM内存结构（花旗银行）\n- JVM 内存分哪几个区，每个区的作用是什么?（唯品会）\n- 详解JVM内存模型（360）\n- JVM内存模型的相关知识了解多少，比如重排序，内存屏障，happen-before，主内存，工作内存。（拼多多）\n\n- 说一下JVM内存模型吧，有哪些区？分别干什么的？ (百度)\n\n- JVM的内存结构划分是什么样子的？ (支付宝)\n\n- JVM 内存分哪几个区，每个区的作用是什么? (蚂蚁金服)\n\n- Java虚拟机内存模型能说说吗？ (蚂蚁金服)\n\n- JVM内存分布/内存结构？ (蚂蚁金服)\n\n- 讲讲JVM分区 (携程)\n\n- 一面：讲一下JVM内存布局 (滴滴)\n\n- Java的内存分区 (字节跳动)\n\n- 讲讲JVM运行时数据库区 (字节跳动)\n\n- JVM内存模型以及分区，需要详细到每个区放什么。 (天猫)\n\n- JVM 内存分哪几个区，每个区的作用是什么? (拼多多)\n\n- JVM的内存布局以及垃圾回收原理及过程讲一下 (京东)\n\n\n\n## 3.2 程序计数器\n\n- JVM计数器如何记数（京东-物流）\n\n \n\n \n\n## 3.3 栈\n\n- 堆和栈的区别、谁的性能更高（艾绒软件）\n- 栈是如何运行的（OPPO）\n\n- JVM有哪些组成，堆，栈各放了什么东西。（新浪）\n\n- Java 中堆和栈有什么区别？（国美）\n\n- 什么情况下会发生栈内存溢出。（360）\n\n- 栈和堆的区别？（蚂蚁金服）\n\n- 什么情况下会发生栈内存溢出。 (京东)\n\n- Java中，栈的大小通过什么参数来设置？ (阿里)\n\n- 怎么理解栈、堆？堆中存什么？栈中存什么？ (阿里)\n\n- 为什么要把堆和栈区分出来呢？栈中不是也可以存储数据吗？ (阿里)\n\n- 说一下什么情况发生栈溢出 (滴滴)\n\n\n\n## 3.4 堆与MinorGC MajorGC\n\n- 什么时候对象会进入老年代？（顺丰）\n\n- 初始堆大小和最大堆大小一样，问这样有什么好处？（亚信）\n\n- 老年代的垃圾回收机制什么时候触发，自动触发的阈值是多少（蚂蚁金服）\n\n- 新生代的垃圾回收什么时候触发（蚂蚁金服）\n\n- 堆里面的分区：Eden，survival （from+ to），老年代，各自的特点。（京东-物流）\n\n- Minor GC 与 Full GC 分别在什么时候发生？（腾讯）\n\n- 简述 Java 内存分配与回收策略以及 Minor GC 和Major GC（国美）\n\n- Java 堆的结构是什么样子的？（猎聘）\n\n- JVM内存为什么要分成新生代，老年代，持久代。新生代中为什么要分为Eden和Survivor（字节跳动）\n\n- 什么时候发生Full GC（58）\n\n- 计算下多长时间触发一次Minor GC（蚂蚁金服）\n\n- 堆的结构？为什么两个survivor区？ (蚂蚁金服)\n\n- Eden和Survior的比例分配 (蚂蚁金服)\n\n- JVM内存分区，为什么要有新生代和老年代 (小米)\n\n- JVM的内存结构，Eden和Survivor比例。 (京东)\n\n- JVM内存为什么要分成新生代，老年代，持久代。新生代中为什么要分为Eden和Survivor。 (京东)\n\n- JVM内存分区，为什么要有新生代和老年代？ (美团)\n\n- JVM的内存结构，Eden和Survivor比例。 (京东)\n\n- JVM内存为什么要分成新生代，老年代，持久代。新生代中为什么要分为Eden和Survivor。 (京东)\n\n- 堆大小通过什么参数设置？ (阿里)\n\n- 简述 Java 内存分配与回收策略以及 Minor GC 和Major GC (百度)\n\n- JVM垃圾回收机制，何时触发Minor GC等操作 (蚂蚁金服)\n\n- JVM的一次完整的GC流程（从ygc到fgc)是怎样的(蚂蚁金服)\n\n- JVM中最大堆大小有没有限制？ (阿里)\n\n- 描述JVM中一次full gc过程 (腾讯)\n\n\n\n## 3.5 对象分配\n\n- 什么时候对象会进入老年代？（渣打银行）\n\n- 什么是空间分配担保策略？（渣打银行）\n\n- 什么是空间分配担保策略？（腾讯、百度）\n\n- 什么是空间分配担保策略？（顺丰）\n\n- 问什么幸存者区15次进入老年区，懂原理吗？（58）\n\n- JVM的伊甸园区，from区，to区的比例是否可调？（花旗银行）\n\n- JVM中一次完整的GC流程是怎样的，对象如何晋升到老年代（字节跳动）\n\n- 什么时候对象会进入老年代？ (字节跳动)\n\n- 对象在堆内存创建的生命周期 (蚂蚁金服)\n\n- 重点讲讲对象如何晋升到老年代，几种主要的JVM参数 (蚂蚁金服)\n\n- 新生代和老年代的内存回收策略 (蚂蚁金服)\n\n- 什么时候对象可以被收回？ (蚂蚁金服)\n\n \n\n## 3.6 方法区\n\n- JVM的永久代中会发生垃圾回收么?（腾讯）\n\n- JVM的永久代中会发生垃圾回收吗？ (美团)\n\n\n\n## 3.7 总结\n\n- 讲一下为什么JVM要分为堆、方法区等？原理是什么？（UC、智联）\n\n- JVM的分区了解吗，内存溢出发生在哪个位置 （亚信、BOSS）\n\n- 简述各个版本内存区域的变化？（猎聘）\n\n- Java8的内存分代改进 (蚂蚁金服)\n\n- JVM的内存模型，Java8做了什么修改 (天猫)\n\n- OOM的错误，StackOverFlow错误，permgen space的错误 (蚂蚁金服)\n\n \n\n## 3.8 String\n\n- new string()是放在哪里，还放在哪里？（搜狐、万达集团）\n\n \n\n# 4、对象内存布局篇\n\n- new对象流程？（龙湖地产）\n\n- 对象创建方法，对象的内存分配，对象的访问定位。（360安全）\n\n- Java对象头里有什么 (蚂蚁金服)\n\n- 对象在JVM中是怎么存储的？ (美团)\n\n- 对象头信息里面有哪些东西？ (美团)\n- 二面：Java对象头里有什么 (蚂蚁金服)\n\n \n\n \n\n# 5、GC篇\n\n## 5.1 概述\n\n- 讲讲JVM的gc (携程)\n\n- GC是什么？为什么要有GC？ (蚂蚁金服)\n\n- 什么情况下触发垃圾回收？ (阿里)\n\n\n\n## 5.2 垃圾回收器\n\n- 常见的垃圾回收器算法有哪些，各有什么优劣？（网易）\n\n- 常见的垃圾回收器算法有哪些，各有什么优劣？（阿里-天猫、UC）\n\n- 有哪些垃圾回收方法，jdk8的垃圾收集器是什么？（搜狐、万达集团）\n\n- G1原理。（亚信）\n\n- 几种垃圾回收器（亚信）\n\n- 垃圾回收器有哪些？都有哪些算法来实现？项目中用的垃圾回收器是什么？（平安）\n- 垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收？（平安）\n- 你知道那些垃圾回收器（高德地图）\n\n- 有些垃圾方法，8的垃圾收集器是什么。（新浪）\n- GC 收集器有哪些？CMS 收集器与 G1 收集器的特点。\n\n- 请问吞吐量的优化和响应优先的垃圾收集器是如何选择的呢？（滴滴）\n\n- 你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms和G1，包括原理，流程，优缺点。（拼多多）\n\n- CMS 收集器与 G1 收集器的特点。 (蚂蚁金服)\n\n- G1回收器讲下回收过程 (蚂蚁金服)\n\n- 你知道哪几种垃圾回收器，各自的优缺点，重点讲一下cms和g1，包括原理，流程，优缺点 (蚂蚁金服)\n\n- CMS特点，垃圾回收算法有哪些？各自的优缺点，他们共同的缺点是什么？ (天猫)\n\n- 讲一下CMS垃圾收集器垃圾回收的流程，以及CMS的缺点 (抖音)\n\n- Java的垃圾回收器都有哪些，说下g1的应用场景，平时你是如何搭配使用垃圾回收器的 (滴滴)\n\n- 说几个垃圾回收器，cms回收器有哪几个过程，停顿几次，会不会产生内存碎片。老年代产生内存碎片会有什么问题。 (小米)\n\n- JVM有哪三种垃圾回收器？ (阿里)\n\n- 吞吐量优先选择什么垃圾回收器？响应时间优先呢？ (阿里)\n\n- 常见的垃圾回收器算法有哪些，各有什么优劣？ (字节跳动)\n\n- CMS和G1了解么，CMS解决什么问题，说一下回收的过程。(字节跳动)\n\n- CMS回收停顿了几次，为什么要停顿两次。(字节跳动)\n\n- CMS过程是怎样的？内部使用什么算法做垃圾回收？ (美团)\n\n- g1和cms区别,吞吐量优先和响应优先的垃圾收集器选择 (携程)\n\n \n\n## 5.3 垃圾回收算法\n\n- 什么时候对象可以被收回？（阿里-闲鱼）\n\n- 什么时候对象可以被收回？（拼多多）\n\n- GC算法都有哪些？他们之间的区别是什么？（菜鸟）\n\n- JVM的常用的GC算法（高得地图）\n\n- JVM的垃圾回收为什么采用分代GC。跟语言有关系吗？（阿里-钉钉）\n\n- 分代的意义说一下 （阿里-钉钉）\n\n- 而全GC时间较长 分代GC可以大大降低GC时间而且也可以保证heap不会过快增长（墨迹天气）\n\n- GC垃圾回收机制算法（数信互融科技发展有限公司）\n\n- GC的算法，复制算法和标记清除的优缺点？（迪原创新）\n\n- 常用的GC算法，如何确定哪些是要被清除的哪些是不能被清除（网易邮箱、美团）\n\n- 垃圾回收机制的几种回收算法（亚信）\n\n- GC算法都有哪些？他们之间的区别是什么？各自的适用场景？（B站）\n\n- GC分代算法（花旗银行）\n\n- 新生代的垃圾回收什么时候触发（花旗银行）\n\n- 老年代的垃圾回收机制什么时候触发，自动触发的阈值是多少（花旗银行）\n\n- GC 的两种判定方法：（360安全）\n\n- GC 的三种收集方法：标记清除、标记整理、复制算法的原理与特点，分别用在什么地方，如果让你优化收集方法，有什么思路？（腾讯）\n\n \n\n- 如何判断一个对象是否存活?（唯品会）\n\n- Java 中垃圾收集的方法有哪些?（苏宁）\n\n- 你是用什么方法判断对象是否死亡？（滴滴）\n\n- 说一下GC算法，分代回收说下 (百度)\n\n- 垃圾收集策略和算法 (百度)\n\n- 说一下gc算法，分代回收说下 (百度)\n\n- 说一下gc算法，分代回收说下 (百度)\n\n- JVM有哪些回收算法，对应的收集器有哪些？ (蚂蚁金服)\n\n- 如何判断一个对象是否存活？ (蚂蚁金服)\n\n- JVM GC算法有哪些，目前的JDK版本采用什么回收算法 (蚂蚁金服)\n\n- 垃圾回收算法的实现原理。 (京东)\n\n- JVM场景问题， 标记清除多次后老年代产生内存碎片，引起full gc，接下来可能发生什么问题。 (小米)\n\n- Java怎么进行垃圾回收的？什么对象会进老年代？ 垃圾回收算法有哪些？为什么新生代使用复制算法？ (京东)\n\n- 讲一下JVM中如何判断对象的生死？ (京东)\n\n \n\n- 如何选择合适的垃圾收集算法？ (阿里)\n\n- 讲一讲垃圾回收算法。 (阿里)\n\n- JVM有哪些回收算法，对应的收集器有哪些？ (拼多多)\n\n- 讲讲你知道的垃圾回收算法 (字节跳动)\n\n- Java对象的回收方式，回收算法。 (字节跳动)\n\n- JVM垃圾收集算法与收集器有哪些？ (京东)\n\n- JVM场景问题， 标记清除多次后老年代产生内存碎片，引起full gc，接下来可能发生什么问题？ (美团)\n\n- 分代垃圾回收过程？ (美团)\n\n- GC如何分代的？各代用什么算法回收？ (美团)\n\n \n\n \n\n## 5.4 其 它\n\n- GC回收的是哪部分的垃圾？（vivo）\n\n- 什么是内存泄漏和什么是内存溢出（陌陌）\n\n- Java存在内存泄漏吗，内存泄漏的场景有哪些，如何避免（百度）\n\n- SafePoint 是什么（360安全）\n\n- Java 中会存在内存泄漏吗，简述一下？（猎聘）\n\n- 垃圾回收的优点和原理，并考虑 2 种回收机制？基本原理是什么？（瓜子）\n\n- 什么是分布式垃圾回收（DGC）？它是如何工作的？（瓜子）\n\n \n\n- 强引用、软引用、弱引用、虚引用的区别？（字节跳动）\n\n- 垃圾回收的优点和原理。 (蚂蚁金服)\n\n- 如何解决内存碎片的问题？ (阿里)\n\n- 垃圾回收机制等 (支付宝)\n\n- Java GC机制？GC Roots有哪些？ (拼多多)\n\n- JVM怎样判断一个对象是否可回收，怎样的对象才能作为GC root (腾讯)\n\n- 什么是Full GC？GC? major GC? stop the world (腾讯)\n\n- System.gc()和RunTime.gc()会做什么事情？ (字节跳动)\n\n- Java GC机制？GC Roots有哪些？ (字节跳动)\n\n- 哪些部分可以作为GC Root？ (字节跳动)\n\n- Java GC机制？GC Roots有哪些？ (抖音)\n\n- Java GC机制？GC Roots有哪些？ (京东)\n\n- GC是什么？为什么要有GC？ (美团)\n\n- 简述Java垃圾回收机制 (美团)\n\n- 如何判断一个对象是否存活？（或者GC对象的判定方法）  (美团)\n\n- 垃圾回收的优点和原理。(美团)\n\n- 垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？(美团)\n\n- 有什么办法主动通知虚拟机进行垃圾回收？  (美团)\n\n- GC root如何确定，哪些对象可以作为GC Root? (美团)\n\n- 你开发中使用过WeakHashMap吗？(京东)\n\n \n\n# 6、执行引擎篇\n\n- 你是怎么指定JVM启动模式？（字节跳动）\n\n- 那你知道-server和-client的区别吗？（美图）\n\n# 7、调优工具篇\n\n- 怎么获取 Java 程序使用的内存？堆使用的百分比？（国美）\n\n- 讲讲你理解的性能评价及测试指标？（瓜子）\n\n- JVM的进程有哪些线程启动，有了解吗？（神州租车）\n\n- 你使用过Java虚拟机性能监控和故障处理工具吗？（美图）\n\n- 说说你知道的几种主要的JVM参数（京东）\n\n- 怎么打出线程栈信息。（字节跳动）\n\n- JVM的参数，你知道的说一下 (百度)\n\n \n\n# 8、调优篇\n\n- JVM调优调的哪些参数？在哪里写这些参数？ （亚信）\n\n- 说到内存泄漏，问有没有碰到，内存泄漏怎么解决？（拼多多）\n\n- 常用的性能优化方式有哪些？（百度金融）\n\n \n\n- 内存泄漏是怎么造成的？（拼多多、字节跳动）\n\n- 虚拟机如何调优？（顺丰）\n\n- 内存调优怎么调？有几种方式？参数都有什么？（顺丰）\n\n- 栈溢出导致的原因？如何解决？（搜狐）\n\n \n\n- JVM调优策略 （杭州鲁尔物联科技有限公司、燕梭金融、汇博云通）\n\n- JVM调优调的哪些参数？问这样有什么好处？在哪里写这些参数（浪潮）\n\n- 几种常用的内存调试工具你知道哪些？（搜狐）\n\n \n\n- 如何优化减少Full GC？（阿里-闲鱼）\n\n- 当出现了内存溢出，你怎么排错。 (京东)\n\n- 有实际的JVM性能调优案例吗？重点需要关注哪些核心参数？ (滴滴)\n\n- OOM说一下？怎么排查？哪些会导致OOM? OOM出现在什么时候 (腾讯)\n\n- 内存泄漏与内存溢出的区别 (字节跳动)\n\n- Java存在内存溢出的现象吗(字节跳动)\n\n- Java中会存在内存泄漏吗，请简单描述。  (美团) \n\n- JVM性能调优都做了什么？(支付宝)\n\n \n\n- 有做过JVM内存优化吗？ (小米)\n\n- 从SQL、JVM、架构、数据库四个方面讲讲优化思路 (小米)\n\n- JVM的编译优化 (蚂蚁金服)\n\n- JVM性能调优都做了什么 (蚂蚁金服)\n\n- JVM诊断调优工具用过哪些？ (蚂蚁金服)\n\n- JVM怎样调优，堆内存栈空间设置多少合适.. (蚂蚁金服)\n\n- JVM相关的分析工具使用过的有哪些？具体的性能调优步骤如何 (蚂蚁金服)\n\n \n\n- 如何进行JVM调优？有哪些方法？ (阿里)\n\n- 如何理解内存泄漏问题？有哪些情况会导致内存泄露？如何解决？ (阿里)\n\n- JVM如何调优、参数怎么调？ (字节跳动)\n\n- 从SQL、JVM、架构、数据库四个方面讲讲优化思路 (拼多多)\n\n- JVM诊断调优工具用过哪些？ (京东)\n\n- 每秒几十万并发的秒杀系统为什么会频繁发生GC？ (京东)\n\n- 日均百万级交易系统如何优化JVM？ (京东)\n\n- 线上生产系统OOM如何监控及定位与解决？ (京东)\n\n- 高并发系统如何基于G1垃圾回收器优化性能？ (京东)","tags":["jvm","java","基础知识","面试"],"categories":["面试题"]},{"title":"面试大纲","url":"/2023/11/29/面试大纲/","content":"1 数据结构与算法\n\n2 jvm\n\n3 多线程\n\n4 数据库（mysql）\n\n5 redis\n\n6 mq ,kafka\n\n7 es\n\n8 spring / spring boot\n\n9 spring cloud\n\n10 设计模式\n\n11 系统设计\n\n12 分布式\n\n13 项目经验","tags":["面试","大纲"],"categories":["面试"]},{"title":"杭州之旅","url":"/2023/11/28/杭州之旅/","content":"\n\n![fengmian.jpeg](fengmian.jpeg)\n![ronghaoli.jpeg](ronghaoli.jpeg)\n![eson.jpeg](eson.jpeg)\n![night.jpeg](night.jpeg)\n![flynight.jpg](flynight.jpg)\n![oragin.jpeg](oragin.jpeg)\n![flawor.jpeg](flawor.jpeg)\n![gj.jpeg](gj.jpeg)\n","tags":["生活","旅行"],"categories":["生活"]}]